import { ServicesFireBase, ServicesWorki } from "../../services";
import { MetaProvider } from "@builderbot/provider-meta";
import { addKeyword, EVENTS } from "@builderbot/bot";
import config from "../../config";
import { consumeCredit } from "~/services/credits/PaymentService";
import { InitFlows } from "../InitFlows";
import { FallBackFlow } from "../FallBackFlow";
import { ThanksFlow } from "../ThanksFlow";

export const RevisarCvFlow = addKeyword<MetaProvider>(EVENTS.ACTION)
  .addAnswer(
    `üìÑ *An√°lisis Profesional de CV*\n\n¬°Excelente decisi√≥n! Voy a revisar tu curr√≠culum y darte retroalimentaci√≥n detallada para optimizarlo.\n\nüéØ *¬øPara qu√© puesto quieres optimizar tu CV?*\nEsto me ayudar√° a darte consejos espec√≠ficos para esa industria.\n\nüìù *Ejemplos:*\n‚Ä¢ "Practicante de ventas en Coca Cola"\n‚Ä¢ "Analista de marketing en banca"\n‚Ä¢ "Ingeniero de software en tecnolog√≠a"\n\n‚úçÔ∏è Describe el puesto que te interesa:`,
    {
      capture: true,
      buttons: [
        {
          body: "üîô Regresar",
        },
      ],
    },
    async (ctx, { state, gotoFlow }) => {
      if (ctx.body.includes("üîô Regresar")) {
        return gotoFlow(InitFlows);
      }
      await state.update({ puesto: ctx.body });
    }
  )
  .addAnswer(
    `‚úÖ *¬°Perfecto!* He registrado el puesto de inter√©s.\n\nüìÑ *Env√≠o de CV*\nAhora necesito que env√≠es tu curr√≠culum para realizar un an√°lisis profesional completo.\n\nüìé *Por favor, env√≠a tu CV en formato PDF*\n\nüîç *¬øQu√© analizar√©?*\n‚Ä¢ Estructura y formato del CV\n‚Ä¢ Compatibilidad con sistemas ATS\n‚Ä¢ Palabras clave relevantes para tu industria\n‚Ä¢ Fortalezas y √°reas de mejora\n‚Ä¢ Recomendaciones espec√≠ficas\n\n‚è±Ô∏è El an√°lisis toma 2-3 minutos`,
    {
      capture: true,
      buttons: [
        {
          body: "üîô Regresar",
        },
      ],
    },
    async (ctx, { flowDynamic, gotoFlow, extensions, state }) => {
      if (ctx.body.includes("üîô Regresar")) {
        return gotoFlow(RevisarCvFlow, 1);
      } else if (
        !ctx?.fileData?.mime_type &&
        ctx?.fileData?.mime_type !== "application/pdf"
      ) {
        await flowDynamic([
          {
            body: `‚ö†Ô∏è El archivo que enviaste no es compatible. Para poder analizar tu CV correctamente, necesito que lo env√≠es en formato PDF (.pdf). 

Por favor, convierte tu documento a PDF y vuelve a enviarlo. Si necesitas ayuda para convertir tu archivo a PDF, puedes usar herramientas gratuitas en l√≠nea.`,
            buttons: [
              {
                body: "‚ùå Cancelar",
              },
            ],
          },
        ]);
        return gotoFlow(RevisarCvFlow, 2);
      } else {

        console.log("ctx.fileData", ctx.fileData);

        const worki = extensions.worki as ServicesWorki;
        const db = extensions.db as ServicesFireBase;
        const puesto = await state.get("puesto");
        
        await flowDynamic(
          "üìÑ *¬°Gracias por compartir tu CV!* üôè\n\nEstoy analiz√°ndolo detalladamente para ofrecerte retroalimentaci√≥n valiosa. Este proceso puede tomar entre 2-3 minutos... ‚è≥\n\nEl an√°lisis se est√° realizando en un servidor externo, por favor ten paciencia."
        );

        try {
          // Aqu√≠ ir√≠a la l√≥gica de subida a S3 y an√°lisis del CV
          // Por ejemplo:
          // const s3 = new S3Service();
          // const publicUrl = await s3.uploadCvFromUrl(ctx.url, ctx.from);
          // const res = await worki.analyzeCv(publicUrl, puesto, ctx.fileData.filename);

          // Simulaci√≥n de an√°lisis (debes reemplazar por tu l√≥gica real)
          const res = await worki.saveAndUploadFTP(ctx.url, puesto, ctx.fileData.filename);

          const startTime = Date.now();
          const now = new Date();

          const analysisItem = {
            analyzedAt: {
              seconds: Math.floor(now.getTime() / 1000),
              nanoseconds: (now.getTime() % 1000) * 1e6,
            },
            jobPosition: puesto,
            analysisData: {
              analysisId: res.analysis_id,
              pdf_report_url: res.extractedData.analysisResults.pdf_url,
              cvUrl: res.extractedData.cvOriginalFileUrl,
              candidateInfo: {
                workExperience: res.extractedData.extractedData.workExperience,
                contactInfo: res.extractedData.extractedData.contactInfo,
                candidateName: res.extractedData.extractedData.candidateName,
                professionalSummary:
                  res.extractedData.extractedData.professionalSummary,
                education: res.extractedData.extractedData.education,
                rawText: res.extractedData.extractedData.rawText,
                skills: res.extractedData.extractedData.skills,
              },
              apiResponseReceivedAt: {
                seconds: Math.floor(startTime / 1000),
                nanoseconds: (startTime % 1000) * 1e6,
              },
              analysisResults: {
                areasForImprovement:
                  res.extractedData.analysisResults.areasForImprovement,
                formattingAndLanguage:
                  res.extractedData.analysisResults.formattingAndLanguage,
                feedbackSummary:
                  res.extractedData.analysisResults.feedbackSummary,
                keywordAnalysis:
                  res.extractedData.analysisResults.keywordAnalysis,
                atsCompliance: res.extractedData.analysisResults.atsCompliance,
                overallScore: res.extractedData.analysisResults.overallScore,
                strengths: res.extractedData.analysisResults.strengths,
                pdf_url: res.extractedData.analysisResults.pdf_url,
              },
            },
          };

          const existingAnalysis = await db.getCVAnalysisDetailed(ctx.from);
          const historial = existingAnalysis?.cvAnalysisHistorial || [];

          historial.push(analysisItem);

          await db.saveCVAnalysisDetailed(ctx.from, {
            id: ctx.from,
            cvAnalysisHistorial: historial,
          });
          await db.updateUser(ctx.from, {
            totalCVAnalyzed: historial.length,
          });
          // await consumeCredit(ctx.from, db);
          await db.saveCVAnalysis({
            analysis: {
              url: res.extractedData.analysisResults.pdf_url,
            },
            userId: ctx.from,
            jobPosition: puesto,
            id: res.analysis_id,
          });
          await flowDynamic([
            {
              body: "‚úÖ *¬°An√°lisis completado!* üéâ\n\nHe revisado tu CV y he preparado un informe detallado con todas mis observaciones.",
              media: res.extractedData.analysisResults.pdf_url,
            },
          ]);
          return gotoFlow(ThanksFlow);
        } catch (error) {
          console.error("Error al analizar CV:", error);
          return gotoFlow(FallBackFlow);
        }
      }
    }
  );